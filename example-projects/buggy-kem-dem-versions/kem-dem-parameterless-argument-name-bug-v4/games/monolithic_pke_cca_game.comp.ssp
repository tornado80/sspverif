composition MonolithicPkeCcaGame {
    const b: Bool;
    const len: fn Bits(*) -> Integer;
    const zeros: fn Integer -> Bits(*);
    const concatenate: fn Bits(400), Bits(*) -> Bits(*);
    const deconcatenate: fn Bits(*) -> (Bits(400), Bits(*));
    const kem_gen: fn Bits(2000) -> (Bits(100), Bits(1000));
    const kem_encaps: fn Bits(100) -> (Bits(256), Bits(400));
    const kem_decaps: fn Bits(1000), Bits(400) -> Bits(256);
    const dem_enc: fn Bits(500), Bits(256), Bits(*) -> Bits(*);
    const dem_dec: fn Bits(256), Bits(*) -> Bits(*);

    instance pkg_KemScheme = KemScheme {
        params {
            kem_gen: kem_gen,
            kem_encaps: kem_encaps,
            kem_decaps: kem_decaps,
        }
    }

    instance pkg_DemScheme = DemScheme {
        params {
            dem_enc: dem_enc,
            dem_dec: dem_dec
        }
    }

    instance pkg_PkeScheme = PkeScheme {
        params {
            concatenate: concatenate,
            deconcatenate: deconcatenate
        }
    }

    instance pkg_PKE_CCA = PKE_CCA {
        params {
            b: b,
            len: len,
            zeros: zeros,
        }
    }

    compose {
        pkg_PkeScheme: {
            KEM_GEN: pkg_KemScheme,
            KEM_ENCAPS: pkg_KemScheme,
            KEM_DECAPS: pkg_KemScheme,
            DEM_ENC: pkg_DemScheme,
            DEM_DEC: pkg_DemScheme
        }
        pkg_PKE_CCA: {
            GEN: pkg_PkeScheme,
            ENC: pkg_PkeScheme,
            DEC: pkg_PkeScheme
        }
        adversary: {
            PKGEN: pkg_PKE_CCA,
            PKENC: pkg_PKE_CCA,
            PKDEC: pkg_PKE_CCA
        }
    }

}