composition DemCcaGame {
    const b: Bool;

    const output_key_length: Integer;

    const enc_randomness_length: Integer;

    const len: fn Bits(*) -> Integer;
    const zeros: fn Integer -> Bits(*);
    const dem_enc: fn Bits(enc_randomness_length), Bits(output_key_length), Bits(*) -> Bits(*);
    const dem_dec: fn Bits(output_key_length), Bits(*) -> Bits(*);

    instance pkg_DemScheme = DemScheme {
        params {
            enc_randomness_length: enc_randomness_length,
            output_key_length: output_key_length,
            dem_enc: dem_enc,
            dem_dec: dem_dec
        }
    }

    instance pkg_Key = Key {
        params {
            n: output_key_length
        }
    }

    instance pkg_DEM = DEM {
        params {
            b: b,
            output_key_length: output_key_length,
            len: len,
            zeros: zeros,
        }
    }

    compose {
        pkg_DEM: {
            DEM_ENC: pkg_DemScheme,
            DEM_DEC: pkg_DemScheme,
            GET: pkg_Key
        }
        adversary: {
            ENC: pkg_DEM,
            DEC: pkg_DEM,
            GEN: pkg_Key
        }
    }
}