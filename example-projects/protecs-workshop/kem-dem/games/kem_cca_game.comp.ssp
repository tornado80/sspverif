composition KemCcaGame {
    const b: Bool;
    const kem_gen: fn Bits(2000) -> (Bits(100), Bits(1000));
    const kem_encaps: fn Bits(100) -> (Bits(256), Bits(400));
    const kem_decaps: fn Bits(1000), Bits(400) -> Bits(256);

    instance pkg_KemScheme = KemScheme {
        params {
            kem_gen: kem_gen,
            kem_encaps: kem_encaps,
            kem_decaps: kem_decaps,
        }
    }

    instance pkg_Key = Key {
    }

    instance pkg_KEM = KEM {
        params {
            b: b,
        }
    }

    compose {
        pkg_KEM: {
            SET: pkg_Key,
            GEN: pkg_Key,
            KEM_GEN: pkg_KemScheme,
            KEM_ENCAPS: pkg_KemScheme,
            KEM_DECAPS: pkg_KemScheme
        }
        adversary: {
            KEMGEN: pkg_KEM,
            ENCAPS: pkg_KEM,
            DECAPS: pkg_KEM,
            GET: pkg_Key
        }
    }
}