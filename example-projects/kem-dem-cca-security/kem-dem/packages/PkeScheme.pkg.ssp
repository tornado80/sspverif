package PkeScheme {

    import oracles {
        KEM_GEN() -> (Bits(100), Bits(1000)),
        KEM_ENCAPS(pk: Bits(100)) -> (Bits(256), Bits(400), Bits(3000)),
        KEM_DECAPS(sk: Bits(1000), ek: Bits(400)) -> Bits(256),
        DEM_ENC(k: Bits(256), m: Bits(*)) -> Bits(*) /* ciphertext length */,
        DEM_DEC(k: Bits(256), c: Bits(*) /* ciphertext length */) -> Bits(*),
    }

    oracle GEN() -> (Bits(100), Bits(1000)) {
        pk_sk <- invoke KEM_GEN();
        return pk_sk;
    }

    oracle ENC(pk: Bits(100), m: Bits(*)) -> (Bits(400), Bits(*), Bits(3000)) {
        k_ek_r <- invoke KEM_ENCAPS(pk);
        (k, ek, r) <- parse k_ek_r;
        c <- invoke DEM_ENC(k, m);
        return (ek, c, r);
    }

    oracle DEC(sk: Bits(1000), c: (Bits(400), Bits(*))) -> Bits(*) {
        (ek, ctxt) <- parse c;
        k <- invoke KEM_DECAPS(sk, ek);
        m <- invoke DEM_DEC(k, ctxt);
        return m;
    }
}