composition ModularPkeCcaGame {
    const key_idealization: Bool;
    const dem_idealization: Bool;

    const len: fn Bits(*) -> Integer;
    const zeros: fn Integer -> Bits(*);
    const kem_gen: fn Bits(2000) -> (Bits(100), Bits(1000));
    const kem_encaps: fn Bits(3000), Bits(100) -> (Bits(256), Bits(400));
    const kem_decaps: fn Bits(1000), Bits(400) -> Bits(256);
    const dem_enc: fn Bits(500), Bits(256), Bits(*) -> Bits(*);
    const dem_dec: fn Bits(256), Bits(*) -> Bits(*);

    instance pkg_Key = Key {
        params {
            b: key_idealization,
        }
    }

    instance pkg_DemScheme = DemScheme {
        params {
            dem_enc: dem_enc,
            dem_dec: dem_dec
        }
    }

    instance pkg_KemScheme = KemScheme {
        params {
            kem_gen: kem_gen,
            kem_encaps: kem_encaps,
            kem_decaps: kem_decaps,
        }
    }

    instance pkg_DEM = DEM {
        params {
            b: dem_idealization,
            len: len,
            zeros: zeros,
        }
    }

    instance pkg_KEM = KEM {
    }

    instance pkg_MOD_CCA = MOD_CCA {
    }

    compose {
        pkg_KEM: {
            KEM_GEN: pkg_KemScheme,
            KEM_ENCAPS: pkg_KemScheme,
            KEM_DECAPS: pkg_KemScheme,
            SET: pkg_Key
        }
        pkg_DEM: {
            DEM_ENC: pkg_DemScheme,
            DEM_DEC: pkg_DemScheme,
            GET: pkg_Key
        }
        pkg_MOD_CCA: {
            KEMGEN: pkg_KEM,
            ENCAPS: pkg_KEM,
            DECAPS: pkg_KEM,
            ENC: pkg_DEM,
            DEC: pkg_DEM,
            DEM_DEC: pkg_DemScheme
        }
        adversary: {
            PKGEN: pkg_MOD_CCA,
            PKENC: pkg_MOD_CCA,
            PKDEC: pkg_MOD_CCA
        }
    }

}