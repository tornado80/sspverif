package DEM {
    params {
        f: fn Table(Integer, Integer) -> Integer,
        b: Bool,
        len: fn Bits(*) -> Integer,
        zeros: fn Integer -> Bits(*),
    }

    state {
        T: Table(Integer, Integer),
        c: Maybe(Bits(*))
    }

    import oracles {
        GET() -> Bits(256),
        DEM_ENC(k: Bits(256), m: Bits(*)) -> Bits(*),
        DEM_DEC(k: Bits(256), c: Bits(*)) -> Bits(*),
    }

    oracle ENC(m: Bits(*)) -> Bits(*) {
        ggg <- f(T);
        assert (c == None);
        k <- invoke GET();
        if b {
            c1 <- invoke DEM_ENC(k, zeros(len(m)));
        } else {
            c1 <- invoke DEM_ENC(k, m);
        }
        c <- Some(c1);
        return c1;
    }

    oracle DEC(ctxt: Bits(*)) -> Bits(*) {
        assert (Unwrap(c) != ctxt);
        k <- invoke GET();
        m <- invoke DEM_DEC(k, ctxt);
        return m;
    }
}