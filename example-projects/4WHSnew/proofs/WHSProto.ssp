proof WHSProto {
    const b: Bool;
    const n: Integer;
    const m: Integer;
    const zeron: Bits(256);
    const prf: fn Bits(256), Integer, Integer, Bits(256), Bits(256), Bool ->  Bits(256);
    const mac: fn Bits(256), Bits(256), Integer -> Bits(256);

    instance Noncesideal = Nonces {
        params {
            b  : true,
            n  : n   ,
        }
    }

    instance Noncesreal = Nonces {
        params {
            b  : false,
            n  : n    ,
        }
    }

    instance CRideal = CR {
        params {
              n:n,
			  b:true,
			  mac:mac,
			  prf:prf,
        }
    }

    instance CRreal = CR {
        params {
              n: n,
			  b: false,
			  mac: mac,
			  prf: prf,
        }
    }

    instance PRFideal = PRF {
        params {
            b  : true,
            n  : n   ,
  	        prf: prf ,
        }
    }

    instance PRFreal = PRF {
        params {
            b  : false,
            n  : n    ,
  	        prf: prf  ,
        }
    }

    instance KX = KX {
        params {
            b       : b ,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }

    instance H1_0 = H1 {
        params {
            b       : b ,
			bnonce  : false,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }
    instance H1_1 = H1 {
        params {
            b       : b ,
			bnonce  : true,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }

    instance H2_0 = H2 {
        params {
            b       : b ,
			bcr     : false,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }
    instance H2_1 = H2 {
        params {
            b       : b ,
			bcr     : true,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }


    instance H3_0 = H3 {
        params {
            b       : b ,
			bcr     : true,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }
    instance H3_1 = H3 {
        params {
            b       : b ,
			bcr     : false,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }


    instance H6_0 = H6 {
        params {
            b       : b ,
			bprf    : false,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }
    instance H6_1 = H6 {
        params {
            b       : b ,
			bprf    : true,
            n       : n    ,
            zeron   : zeron,
  	        prf     : prf  ,
            mac     : mac  ,
        }
    }


    assumptions {
        prf:     PRFreal    ~ PRFideal    /* with advantage time^5/2^(sqrt(n)) */
        nonces:  Noncesreal ~ Noncesideal /* with advantage time^2/2^n */
        collres: CRreal ~ CRideal
    }

    gamehops 
    {
        equivalence KX H1_0 {
            Send1: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send2: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send3: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send4: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send5: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewKey: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewSession: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Test: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Reveal: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            SameKey: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtLeast: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtMost: {
                invariant: [
                    ./proofs/invariant-KX-H1_0.smt2
                ]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }
        reduction H1_0 H1_1  
        {
            assumption nonces

            map Noncesreal H1_0  {
                nonces    : Nonces
            }

            map Noncesideal H1_1 {
                nonces    : Nonces
            }
        }
        equivalence H1_1 H2_0 {
            Send1: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send2: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send3: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send4: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send5: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewKey: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewSession: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Test: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Reveal: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            SameKey: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtLeast: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtMost: {
                invariant: [./proofs/invariant-H1_1-H2_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }
        reduction H2_0 H2_1  
        {
            assumption collres

            map CRreal H2_0  {
                cr: CR
            }

            map CRideal H2_1 {
                cr: CR
            }
        }
        equivalence H2_1 H3_0 {
            Send1: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send2: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
             Send3: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send4: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Send5: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewKey: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            NewSession: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Test: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            Reveal: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            SameKey: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtLeast: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
            AtMost: {
                invariant: [./proofs/invariant-H2_1-H3_0.smt2]

                lemmas {
                    equal-aborts: []
                    invariant:    [no-abort]
                    same-output:  [no-abort]
                }
            }
        }

        reduction H3_1 H3_0  
        {
            assumption collres

            map CRideal H3_0  {
                cr: CR
            }

            map CRreal H3_1 {
                cr: CR
            }
        }

        reduction H6_1 H6_0  
        {
            assumption prf

            map PRFreal H6_0  {
			   PRF: PRF
            }

            map PRFideal H6_1 {
			   PRF: PRF
            }
        }

    }
}