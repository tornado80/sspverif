package Names {
    /*
    # Key package names
    | Name | Integer ID |
    | --- | --- |
    | psk | 0 |
    | hs | 1 |
    | es | 2 |
    | as | 3 |
    | rm | 4 |
    | esalt | 5 |
    | hsalt | 6 |
    | bind | 7 |
    | binder | 8 |
    | eem | 9 |
    | cet | 10 |
    | sht | 11 |
    | cht | 12 |
    | cat | 13 |
    | sat | 14 |
    | eam | 15 |
    | dh  | 16 |
    | 0ikm | 17 |
    | 0salt | 18 |

    SEPARATION_POINTS = [
        "bind", # based on resumption bit
        "cet", "eem", # early, i.e. based on binder tag/key
        "cht", "sht", "cat", "sat", "eam", "rm" # other, i.e. based on both DH and binder tag/key
    ]

    PARENT = {
        "psk": "rm",
        "rm": "as",
        "cat": "as",
        "sat": "as",
        "eam": "as",
        "as": ("hsalt", "0ikm"),
        "cht": "hs",
        "sht": "hs",
        "hsalt": "hs",
        "hs": ("esalt", "dh"),
        "binder": "bind",
        "cet": "es",
        "eem": "es",
        "bind": "es",
        "esalt": "es",
        "es": ("0salt", "psk")
    }

    KEYS = ["psk", "hs", "es", "as", "rm", "esalt", "hsalt", "bind", "binder", "eem", "cet", "sht", "cht", "cat", "sat", "eam", "dh", "0ikm", "0salt"]
    XTR_KEYS = ["es", "as", "hs"]
    XPD_KEYS = ["bind", "binder", "cet", "eem", "esalt", "cht", "sht", "hsalt", "cat", "sat", "eam", "rm", "psk"]
    INTERNAL_KEYS = ["esalt", "hsalt", "bind", "es", "as", "hs", "rm"]
    OUTPUT_KEYS = ["binder", "cet", "eem", "cht", "sht", "cat", "sat", "eam"]
    */

    params {
        parents: fn Integer -> (Maybe(Integer), Maybe(Integer)),
        get_psk: fn Integer -> Integer,
        get_hs: fn Integer -> Integer,
        get_es: fn Integer -> Integer,
        get_as: fn Integer -> Integer,
        get_rm: fn Integer -> Integer,
        get_esalt: fn Integer -> Integer,
        get_hsalt: fn Integer -> Integer,
        get_bind: fn Integer -> Integer,
        get_binder: fn Integer -> Integer,
        get_eem: fn Integer -> Integer,
        get_cet: fn Integer -> Integer,
        get_sht: fn Integer -> Integer,
        get_cht: fn Integer -> Integer,
        get_cat: fn Integer -> Integer,
        get_sat: fn Integer -> Integer,
        get_eam: fn Integer -> Integer,
        get_dh: fn Integer -> Integer,
        get_0ikm: fn Integer -> Integer,
        get_0salt: fn Integer -> Integer,
    }

    oracle IS_OUTPUT_KEY(n: Integer) -> Bool {
        if ((n == get_eem(0)) or (n == get_cet(0)) or (n == get_sht(0)) or (n == get_cht(0)) or (n == get_cat(0)) or (n == get_sat(0)) or (n == get_eam(0)) or (n == get_binder(0))) {
            return true;
        }
        return false;
    }

    oracle IS_INTERNAL_KEY(n: Integer) -> Bool {
        if ((n == get_as(0)) or (n == get_hs(0)) or (n == get_es(0)) or (n == get_rm(0)) or (n == get_bind(0)) or (n == get_esalt(0)) or (n == get_hsalt(0))) {
            return true;
        }
        return false;
    }

    oracle IS_XPD_KEY(n: Integer) -> Bool {
        if ((n == get_psk(0)) or (n == get_rm(0)) or (n == get_bind(0)) or (n == get_esalt(0)) or (n == get_hsalt(0)) or (n == get_eem(0)) or (n == get_cet(0)) or (n == get_sht(0)) or (n == get_cht(0)) or (n == get_cat(0)) or (n == get_sat(0)) or (n == get_eam(0)) or (n == get_binder(0))) {
            return true;
        }
        return false;
    }

    oracle IS_XTR_KEY(n: Integer) -> Bool {
        if ((n == get_hs(0)) or (n == get_es(0)) or (n == get_as(0))) {
            return true;
        }
        return false;
    }

    oracle IS_DH_KEY(n: Integer) -> Bool {
        if (n == get_dh(0)) {
            return true;
        }
        return false;
    }

    oracle IS_PSK(n: Integer) -> Bool {
        if (n == get_psk(0)) {
            return true;
        }
        return false;
    }

    oracle IS_HANDSHAKE_SECRET(n: Integer) -> Bool {
        if (n == get_hs(0)) {
            return true;
        }
        return false;
    }

    oracle IS_BIND_KEY(n: Integer) -> Bool {
        if (n == get_bind(0)) {
            return true;
        }
        return false;
    }

    oracle IS_EARLY_SEPARATION_POINT(n: Integer) -> Bool {
        if ((n == get_cet(0)) or (n == get_eem(0))) { /* early separation points: cet and eem */
            return true;
        }
        return false;
    }

    oracle IS_POST_DH_SEPARATION_POINT(n: Integer) -> Bool {
        if ((n == get_cht(0)) or (n == get_sht(0)) or (n == get_cat(0)) or (n == get_sat(0)) or (n == get_eam(0)) or (n == get_rm(0))) { /* other separation points: cht, sht, cat, sat, eam, rm */
            return true;
        }
        return false;
    }

    oracle GET_DH_NAME() -> Integer {
        return get_dh(0);
    }

    oracle GET_PSK_NAME() -> Integer {
        return get_psk(0);
    }

    oracle GET_BINDER_KEY() -> Integer {
        return get_binder(0);
    }

    oracle PARENTS(n: Integer) -> (Maybe(Integer), Maybe(Integer)) {
        return parents(n);
    }


}