package Sample {
    params {
        cast256: fn Bits(256) -> Bits(*),
        cast384: fn Bits(384) -> Bits(*),
        cast512: fn Bits(512) -> Bits(*),
        default: fn Integer -> Bits(*),
    }

    oracle IS_HASH_ALGORITHM_SUPPORTED(alg: Integer) -> Bool {
        if ((alg == 256) or (alg == 384) or (alg == 512)) {
            return true;
        }
        return false;
    }

    /* returns the length of keys of the given algorithm identifier */
    oracle GET_HASH_ALGORITHM_LENGTH(alg: Integer) -> Integer {
        if ((alg == 256) or (alg == 384) or (alg == 512)) {
            return alg;
        }
        assert false;
        return 0;
    }

    oracle SAMPLE(n: Integer) -> Bits(*) {
        if (n == 256) {
            k256 <-$ Bits(256);
            return cast256(k256);
        }
        if (n == 384) {
            k384 <-$ Bits(384);
            return cast384(k384);
        }
        if (n == 512) {
            k512 <-$ Bits(512);
            return cast512(k512);
        }
        assert false;
        /* This should never happen and we put it here to make "function" total */
        return default(0);
    }
}