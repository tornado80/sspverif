package Check {
    params {
        level: fn Bits(*) -> Integer, /* returns the level of the given handle */
        extract_binder_from_args: fn Bits(*) -> Bits(*), /* extracts binder key from the given transcript */
        mk_binder_handle: fn Bits(*), Bool, Bits(*) -> Bits(*), /* constructs binder handle given an early handle, resumption bit, and trascript */
        mk_dh_handle: fn Bits(*), Bits(*) -> Bits(*), /* constructs a dh handle with sorted DH shares X and Y */
        extract_dh_shares_from_args: fn Bits(*) -> (Bits(*), Bits(*)), /* extracts DH shares from the given transcript */
        extract_dh_handle: fn Bits(*) -> Bits(*) /* extracts DH handle used inside the given handle */
    }

    /* Write about the separation points , "early", and mixing transcripts at these points 
        Remeber bind is a special separation point that mixes the ext/res bit not the transcript
    */
    import oracles {
        XPD(n: Integer, l: Integer, h: Bits(*), r: Bool, args: Bits(*)) -> Bits(*),
        GET(n: Integer, l: Integer, h: Bits(*)) -> (Bits(*), Bool), /* binder key */
    }

    oracle XPD(n: Integer, l: Integer, h: Bits(*), r: Bool, args: Bits(*)) -> Bits(*) {
        if (n == 7) { /* n = bind */
            if r {
                assert (level(h) != 0);
            } else {
                assert (level(h) == 0);
            }
        }
        if ((n == 9) or (n == 10)) { /* early separation points: cet and eem */
            binder <- extract_binder_from_args(args);
            h_binder <- mk_binder_handle(h, r, args); /* needs r to compute h_bind with res/ext */
            t <- invoke GET(8, l, h_binder);
            (k, hon) <- parse t;
            assert (binder == k);
        }
        if ((n == 11) or (n == 12) or (n == 13) or (n == 14) or (n == 5) or (n == 4)) { /* other separation points: cht, sht, cat, sat, eam, rm */
            shares <- extract_dh_shares_from_args(args);
            (X, Y) <- parse shares;
            h_dh <- extract_dh_handle(h);
            assert (h_dh == mk_dh_handle(X, Y));
            binder <- extract_binder_from_args(args);
            h_binder <- mk_binder_handle(h, r, args); /* needs r to compute h_bind with res/ext */
            t <- invoke GET(8, l, h_binder);
            (k, hon) <- parse t;
            assert (binder == k);
        }
        h <- invoke XPD(n, l, h, r, args);
        return h;
    }
}