package g6P {
    state {
        E: Table(Bits(*), Integer),
        TH: Table((Bits(*), Bits(*)), Bits(*)),
        TXTR: Table((Bits(*), Bits(*), Bits(*)), Bits(*)),
    }
    
    params {
        exp: fn Bits(*), Integer -> Bits(*),
        find_collision_in_TXTR: 
            fn Table((Bits(*), Bits(*), Bits(*)), Bits(*)),
               Bits(*),
               Bits(*) -> Maybe((Bits(*), Bits(*)))
    }

    oracle TXTR(X: Bits(*), Y: Bits(*), s: Bits(*)) -> Bits(*) {
        Z <- exp(Y, Unwrap(E[X]));
        if (TH[(Z, s)] != None as Bits(*)) {
            return Unwrap(TH[(Z, s)]);
        }
        XpYp <- find_collision_in_TXTR(TXTR, Z, s);
        if (XpYp != None as (Bits(*), Bits(*))) {
            (Xp, Yp) <- parse Unwrap(XpYp);
            return Unwrap(TXTR[(Xp, Yp, s)]);
        }
        h <-$ Bits(*);
        TXTR[(X, Y, s)] <- Some(h);
        return h;
    }

    oracle TH(Z: Bits(*), s: Bits(*)) -> Bits(*) {
        if (TH[(Z, s)] != None as Bits(*)) {
            return Unwrap(TH[(Z, s)]);
        }
        XY <- find_collision_in_TXTR(TXTR, Z, s);
        if (XY != None as (Bits(*), Bits(*))) {
            (X, Y) <- parse Unwrap(XY);
            return Unwrap(TXTR[(X, Y, s)]);
        }
        h <-$ Bits(*);
        TH[(Z, s)] <- Some(h);
        return h;
    }
}  