package Xpd {
    params {
        n: Integer, /* name of the key, see README */
        l: Integer, /* level */
        /* constructs an xpd handle given the key name, label, parent handle, and args */
        mk_xpd_handle: fn Integer, Integer, Bits(*), Bits(*) -> Bits(*)
    }

    import oracles {
        LABEL(n: Integer, r: Bool) -> Integer,
        GET(h: Bits(*)) -> (Bits(*), Bool), /* gets the parent key */
        SET(h: Bits(*), hon: Bool, k: Bits(*)) -> Bits(*),
        SETPSK(h: Bits(*), hon: Bool, k: Bits(*)) -> Bits(*), /* sets PSK in the next level */
        xpd(k: Bits(*), label: Integer, d: Bits(*)) -> Bits(*),
        HASH(t: Bits(*)) -> Bits(*),
    }

    oracle XPD(h1: Bits(*), r: Bool, args: Bits(*)) -> Bits(*) {
        label <- invoke LABEL(n, r);
        h <- mk_xpd_handle(n, label, h1, args);
        t <- invoke GET(h1);
        (k1, hon) <- parse t;
        if (n == 0) { /* n = psk */
            k <- invoke xpd(k1, label, args);
            h <- invoke SETPSK(h, hon, k);
        } else {
            d <- invoke HASH(args);
            k <- invoke xpd(k1, label, d);
            h <- invoke SET(h, hon, k);
        }
        return h;
    }
}