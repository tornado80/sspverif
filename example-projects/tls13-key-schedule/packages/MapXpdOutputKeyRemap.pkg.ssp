package MapXpdOutputKeyRemap {
    params {
        n: Integer, /* name of the key, see README */
        /* constructs an xpd handle given the key name, label, parent handle, and args */
        mk_xpd_handle: fn Integer, Integer, Bits(*), Bits(*) -> Bits(*)
    }
    
    import oracles {
        LABEL(n: Integer, r: Bool) -> Integer,
        GET(h: Bits(*)) -> (Bits(*), Bool), /* gets the parent key */
        SET(h: Bits(*), hon: Bool, k: Bits(*)) -> Bits(*),
        xpd(k: Bits(*), label: Integer, d: Bits(*)) -> Bits(*),
        HASH(t: Bits(*)) -> Bits(*),
        GETMAP(h: Bits(*)) -> Maybe(Bits(*)),
        SETMAP(h: Bits(*), h1: Bits(*)),
    }

    oracle XPD(h1: Bits(*), r: Bool, args: Bits(*)) -> Bits(*) {
        if ((n == 8) or /* binder */
            (n == 9) or /* eem */
            (n == 10) or /* cet */
            (n == 11) or /* sht */
            (n == 12) or /* cht */
            (n == 13) or /* cat */
            (n == 14) or /* sat */
            (n == 15)) /* eam */
        { /* output keys */
            m1 <- invoke GETMAP(h1);
            assert (m1 != None as Bits(*));
            label <- invoke LABEL(n, r);
            h <- mk_xpd_handle(n, label, h1, args);

            t <- invoke GET(Unwrap(m1));
            (k1, hon) <- parse t;
            d <- invoke HASH(args);
            k <- invoke xpd(k1, label, d);
            _ <- invoke SET(h, hon, k); /* should return h */

            discard <- invoke SETMAP(h, h);
            return h;
        }
    }
}