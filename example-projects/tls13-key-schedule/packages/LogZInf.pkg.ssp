package LogZInf {
    /*
    types {
        Handle: Bits(*)
    }
    */

    state {
        Log: Table(Bits(*), (Bits(*), Bool, Bits(*))),
        LogInverse: Table(Bits(*), (Bits(*), Bool)),
        J: Table(Bits(*), Bool)
    }

    oracle UNQ(h: Bits(*), hon: Bool, k: Bits(*)) -> Bits(*) {
        /* map */
        if (LogInverse[k] != None as (Bits(*), Bool)) {
            (hp, honp) <- parse Unwrap(LogInverse[k]);
            if ((hon == false) and (honp == false)) {
                Log[h] <- Some((hp, hon, k));
                J[k] <- Some(true);
                return hp;
            }
        }

        Log[h] <- Some((h, hon, k));
        LogInverse[k] <- Some((h, hon));
        return h;
    }
    
    oracle Q(h: Bits(*)) -> Maybe(Bits(*)) {
        if (Log[h] == None) {
            return None;
        }
        (hp, hon, k) <- parse Unwrap(Log[h]);
        return Some(hp);
    }
}

