package Key {
    /*
    types {
        Handle: Bits(*),
        AlgId: Integer
    }
    */

    params {
        b: Bool,
        l: Integer, /* level */
        n: Integer, /* name of the key, see README */
        handle_alg: fn Bits(*) -> Integer, /* returns the algorithm identifier of the given handle */
        key_alg: fn Bits(*) -> Integer, /* returns the algorithm identifier of the given key */
        tag: fn Integer, Bits(*) -> Bits(*), /* tags the given key with the given algorithm identifier */
        untag: fn Bits(*) -> Bits(*), /* untags the given key and returns a raw key */
        name: fn Bits(*) -> Integer, /* returns the name of the given handle */
        level: fn Bits(*) -> Integer, /* returns the level of the given handle */
        zeros: fn Integer -> Bits(*), /* returns an all zeros bitstring of the given length */
        len_alg: fn Integer -> Integer, /* returns the length of keys of the given algorithm identifier */
        len_key: fn Bits(*) -> Integer /* returns the length of the given key */
    }

    state {
        K: Table(Bits(*), (Bits(*), Bool)) /* maps handle to (key, honesty bit) */
    }

    import oracles {
        UNQ(h: Bits(*), hon: Bool, k: Bits(*)) -> Bits(*),
        Q(h: Bits(*)) -> Maybe(Bits(*)),
    }

    oracle SET(h: Bits(*), hon: Bool, ks: Bits(*)) -> Bits(*) {
        assert (name(h) == n);
        assert (level(h) == l);
        assert (key_alg(ks) == handle_alg(h));
        k <- untag(ks);
        len_h <- len_alg(handle_alg(h));
        assert (len_h == len_key(k));
        q_h <- invoke Q(h);
        if (q_h != None as Bits(*)) {
            return Unwrap(q_h);
        }
        if b {
            if hon {
                /* let's have different tables for each algorithm length */
                /* what are the consequences of subtyping? */
                k <-$ Bits(*); /* Bits(len_h) */
            }
        }
        unq_h <- invoke UNQ(h, hon, k);
        if (h != unq_h ) {
            return unq_h;
        }
        K[h] <- Some((k, hon));
        return h;
    }

    oracle GET(h: Bits(*)) -> (Bits(*), Bool) {
        /* initialization of noPSK keys */
        if ((name(h) == 3) and (K[h] == None)) { /* 3 represents name of noPSK handles */
            K[h] <- Some((zeros(len_alg(handle_alg(h))), false));
        }
        /* GET oracle code */
        assert (K[h] != None as (Bits(*), Bool));
        (ks, hon) <- parse Unwrap(K[h]);
        k <- tag(handle_alg(h), ks);
        return (k, hon);
    }
}